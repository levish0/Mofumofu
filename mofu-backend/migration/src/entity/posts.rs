//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use super::sea_orm_active_enums::PostStatus;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "posts")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub title: String,
    pub summary: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub content: String,
    pub user_id: Uuid,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: Option<DateTimeWithTimeZone>,
    pub is_deleted: bool,
    pub status: PostStatus,
    pub published_at: Option<DateTimeWithTimeZone>,
    pub last_auto_saved_at: Option<DateTimeWithTimeZone>,
    pub like_count: i32,
    pub comment_count: i32,
    pub view_count: i32,
    pub slug: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::comments::Entity")]
    Comments,
    #[sea_orm(has_many = "super::post_hash_tags::Entity")]
    PostHashTags,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users2,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users1,
}

impl Related<super::comments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comments.def()
    }
}

impl Related<super::post_hash_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostHashTags.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
